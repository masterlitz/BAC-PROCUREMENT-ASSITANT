import React, { useState, useRef, useEffect, useCallback } from 'react';
import { generateProcurementTrivia } from '../../services/geminiService';
import { SocialMediaTrivia } from '../../types';
import Loader from '../Loader';
import { orangeBacolodLogo } from '../../data/logo';

declare global {
    interface Window {
        html2canvas: any;
    }
}

type Theme = 'light' | 'dark';

// Helper component to format text with bold tags from asterisks
const BoldFormattedText: React.FC<{ text: string; className?: string }> = ({ text, className }) => {
    if (!text) return null;

    // Split text by asterisks.
    // e.g., "This is *important* text" becomes ["This is ", "important", " text"]
    const parts = text.split('*');

    return (
        <p className={className}>
            {parts.map((part, index) => {
                // Parts at odd indices were between asterisks, so make them bold.
                if (index % 2 === 1) {
                    return <strong key={index} className="font-bold">{part}</strong>;
                }
                return <span key={index}>{part}</span>;
            })}
        </p>
    );
};


const SocialMediaTriviaTab: React.FC = () => {
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');
    const [trivia, setTrivia] = useState<SocialMediaTrivia | null>(null);
    const [theme, setTheme] = useState<Theme>('light');
    const [triviaTopic, setTriviaTopic] = useState('');
    const canvasRef = useRef<HTMLDivElement>(null);
    const triviaCardRef = useRef<HTMLDivElement>(null);
    const headerRef = useRef<HTMLElement>(null);
    const footerRef = useRef<HTMLElement>(null);
    const [scale, setScale] = useState(1);
    const [containerHeight, setContainerHeight] = useState<number | 'auto'>('auto');
    const [isLayoutReady, setIsLayoutReady] = useState(true);


    // Style objects for the "Stronger Together" text, now with a clean white stroke.
    const commonWhiteStroke = {
        textShadow: '-1.5px -1.5px 0 #FFF, 1.5px -1.5px 0 #FFF, -1.5px 1.5px 0 #FFF, 1.5px 1.5px 0 #FFF',
    };
    const blueTextStyle = {
        color: '#1d4ed8', // blue-700
        ...commonWhiteStroke
    };
    const orangeTextStyle = {
        color: '#f97316', // orange-500
        ...commonWhiteStroke
    };

    /**
     * This effect dynamically calculates the scale of the trivia content card
     * to ensure it fits perfectly within the 1080x1080 canvas, regardless of
     * the length of the text generated by the AI. It prevents the footer
     * and hashtags from being pushed out of the frame by fixing the container height
     * and scaling the content down to fit.
     */
    useEffect(() => {
        if (!trivia) {
            setScale(1);
            setContainerHeight('auto');
            setIsLayoutReady(true);
            return;
        }

        setIsLayoutReady(false);

        // Allow the DOM to update with the new trivia content at full scale first
        const calculationTimer = setTimeout(() => {
            requestAnimationFrame(() => {
                const cardEl = triviaCardRef.current;
                const headerEl = headerRef.current;
                const footerEl = footerRef.current;
                const canvasEl = canvasRef.current;

                if (!cardEl || !headerEl || !footerEl || !canvasEl) {
                    setIsLayoutReady(true);
                    return;
                }

                const headerHeight = headerEl.offsetHeight;
                const footerHeight = footerEl.offsetHeight;
                const canvasHeight = canvasEl.clientHeight;
                const mainEl = cardEl.parentElement as HTMLElement;

                // Use getComputedStyle for robustness, with fallbacks
                const mainMarginTop = mainEl ? parseFloat(getComputedStyle(mainEl).marginTop) : 32;
                const mainMarginBottom = mainEl ? parseFloat(getComputedStyle(mainEl).marginBottom) : 32;
                const canvasPaddingTop = parseFloat(getComputedStyle(canvasEl).paddingTop) || 64;
                const canvasPaddingBottom = parseFloat(getComputedStyle(canvasEl).paddingBottom) || 64;
                
                const availableHeight = canvasHeight - canvasPaddingTop - canvasPaddingBottom - headerHeight - footerHeight - mainMarginTop - mainMarginBottom;
                const cardActualHeight = cardEl.scrollHeight;

                if (cardActualHeight > availableHeight) {
                    setContainerHeight(availableHeight);
                    setScale(availableHeight / cardActualHeight);
                } else {
                    setContainerHeight('auto');
                    setScale(1);
                }
                
                // Allow React to process the state update and re-render with the new scale
                // Then, enable the download button. This prevents race conditions.
                setTimeout(() => setIsLayoutReady(true), 100);
            });
        }, 300); // Give it a moment for the new text to cause layout shifts

        return () => clearTimeout(calculationTimer);
    }, [trivia, theme]);


    const handleGenerateTrivia = async () => {
        setLoading(true);
        setError('');
        setTrivia(null);
        setIsLayoutReady(false);
        try {
            const triviaData = await generateProcurementTrivia(triviaTopic);
            setTrivia(triviaData);
        } catch (err) {
            console.error(err);
            setError('Failed to generate trivia. The AI might be experiencing issues or a network error occurred.');
            setIsLayoutReady(true);
        } finally {
            setLoading(false);
        }
    };

    const handleDownload = () => {
        const canvasElement = canvasRef.current;
        if (!canvasElement || !window.html2canvas || !isLayoutReady) {
            return;
        }

        if (document.activeElement instanceof HTMLElement) {
            document.activeElement.blur();
        }

        setTimeout(() => {
            window.html2canvas(canvasElement, {
                width: 1080,
                height: 1080,
                scale: 1,
                useCORS: true,
                backgroundColor: null,
                onclone: (doc: Document) => {
                    const triviaCard = doc.querySelector('.trivia-card-content');
                    if (triviaCard) {
                        const cardElement = triviaCard as HTMLElement;
                        cardElement.classList.remove('shadow-xl');
                        cardElement.style.border = 'none'; // Remove border for cleaner export
                    }
                }
            }).then((canvas: HTMLCanvasElement) => {
                const link = document.createElement('a');
                link.download = 'bacolod-procurement-trivia.png';
                link.href = canvas.toDataURL('image/png');
                link.click();
            });
        }, 100);
    };

    const LocationIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-orange-400 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" /><path strokeLinecap="round" strokeLinejoin="round" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" /></svg>;
    const PhoneIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-orange-400 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" /></svg>;
    const EmailIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-orange-400 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" /></svg>;

    const lightBgPattern = `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23f97316' fill-opacity='0.05'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`;
    const darkBgPattern = `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23FFFFFF' fill-opacity='0.04'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`;

    const t = {
        light: {
            mainText: 'text-gray-800',
            secondaryText: 'text-gray-600',
            accent: 'text-orange-600',
            answerBg: 'bg-green-100',
            answerText: 'text-green-800',
            answerBorder: 'border-green-300',
            footerText: 'text-gray-600',
            border: 'border-gray-200',
            cardBg: 'bg-white/80',
            shadow: 'shadow-md',
            communiqueBg: 'bg-gray-800',
            communiqueHashtag: 'text-orange-300',
        },
        dark: {
            mainText: 'text-gray-100',
            secondaryText: 'text-gray-300',
            accent: 'text-orange-400',
            answerBg: 'bg-green-900/50',
            answerText: 'text-green-300',
            answerBorder: 'border-green-700',
            footerText: 'text-gray-400',
            border: 'border-gray-700',
            cardBg: 'bg-gray-800/80',
            shadow: 'shadow-lg shadow-black/20',
            communiqueBg: 'bg-black/50',
            communiqueHashtag: 'text-orange-400',
        }
    }[theme];

    const facebookPageUrl = 'https://www.facebook.com/profile.php?id=61577834145424';
    const qrCodeUrl = theme === 'light' 
        ? `https://api.qrserver.com/v1/create-qr-code/?size=90x90&data=${encodeURIComponent(facebookPageUrl)}&bgcolor=ffffff&color=000000&qzone=1`
        : `https://api.qrserver.com/v1/create-qr-code/?size=90x90&data=${encodeURIComponent(facebookPageUrl)}&bgcolor=1f2937&color=ffffff&qzone=1`;

    return (
        <div className="bg-white p-6 sm:p-8 rounded-2xl shadow-lg">
            <h2 className="text-2xl font-bold text-gray-800 mb-4 flex items-center">
                <svg className="w-8 h-8 mr-3 text-orange-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" d="M12 18v-5.25m0 0a6.01 6.01 0 001.5-.189m-1.5.189a6.01 6.01 0 01-1.5-.189m3.75 7.478a12.06 12.06 0 01-4.5 0m3.75 2.311a7.5 7.5 0 00-7.5 0c.883.342 1.83.574 2.82.723a9.037 9.037 0 014.16 0c.99-.149 1.937-.381 2.82-.723M16.5 9.75A4.5 4.5 0 0012 5.25a4.5 4.5 0 00-4.5 4.5M12 18h.008v.008H12V18z" /></svg>
                Social Media Trivia
            </h2>
            <p className="text-gray-600 mb-6">Generate engaging trivia about the new procurement law (R.A. 12009) for social media. Each click creates a new, random trivia card ready for download.</p>

            <div className="grid md:grid-cols-2 gap-6 mb-6">
                 <div className="md:col-span-2">
                    <label htmlFor="trivia-topic" className="block text-sm font-medium text-gray-700 mb-1">
                        Trivia Topic Instruction (Optional)
                    </label>
                    <input
                        id="trivia-topic"
                        type="text"
                        placeholder="e.g., 'the different modalities of procurement'"
                        value={triviaTopic}
                        onChange={(e) => setTriviaTopic(e.target.value)}
                        className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-orange-500 focus:border-orange-500"
                        disabled={loading}
                    />
                    <p className="text-xs text-gray-500 mt-1">Tell the AI what to generate trivia about. Leave blank for a random topic on R.A. 12009.</p>
                </div>
                <button onClick={handleGenerateTrivia} className="btn bg-orange-500 hover:bg-orange-600 text-white font-bold py-3 px-4 rounded-lg w-full disabled:bg-gray-400" disabled={loading}>
                    {loading ? 'AI is thinking...' : 'Generate New Trivia'}
                </button>
                <button 
                    onClick={handleDownload} 
                    className="btn bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-4 rounded-lg w-full disabled:bg-gray-400 disabled:cursor-not-allowed"
                    disabled={!trivia || !isLayoutReady}
                >
                    {!isLayoutReady ? 'Preparing Layout...' : 'Download Image'}
                </button>
            </div>

            {loading && <Loader text="Generating trivia from the archives..." />}
            {error && <div className="text-center my-4 bg-red-50 p-4 rounded-lg border border-red-200 text-red-700">{error}</div>}

            <div className="flex justify-end items-center mb-4">
                <span className="text-sm font-medium text-gray-700 mr-3">Theme:</span>
                <div className="flex rounded-lg p-1 bg-gray-200">
                    <button onClick={() => setTheme('light')} className={`px-3 py-1 text-sm font-semibold rounded-md transition-colors ${theme === 'light' ? 'bg-white text-orange-600 shadow' : 'text-gray-600'}`}>Light</button>
                    <button onClick={() => setTheme('dark')} className={`px-3 py-1 text-sm font-semibold rounded-md transition-colors ${theme === 'dark' ? 'bg-gray-800 text-white shadow' : 'text-gray-600'}`}>Dark</button>
                </div>
            </div>

            <div className="p-4 border-2 border-dashed border-orange-300 rounded-lg overflow-x-auto bg-gray-100 flex justify-center">
                <div 
                    ref={canvasRef} 
                    className={`w-[1080px] h-[1080px] font-['Inter'] flex flex-col p-16 transition-colors duration-300 ${theme === 'light' ? 'bg-orange-50' : 'bg-gray-900'}`} 
                    style={{backgroundImage: theme === 'light' ? lightBgPattern : darkBgPattern}}>
                    
                    <header ref={headerRef} className="flex-shrink-0 flex items-center justify-between">
                         <div className="flex items-center space-x-6">
                            <img src={orangeBacolodLogo} alt="BAC Logo" className="h-28" />
                             <div>
                                <h1 className={`text-6xl font-black tracking-tighter ${t.mainText}`}>PROCUREMENT</h1>
                                <h2 className={`text-7xl font-extrabold ${t.accent}`}>DID YOU KNOW?</h2>
                             </div>
                         </div>
                         <div className={`text-right text-2xl font-semibold`}>
                            <p className={`${t.secondaryText}`}>Bids and Awards Committee</p>
                            <p className={`${t.secondaryText}`}>Bacolod City</p>
                            <p style={{ fontFamily: 'cursive, "Brush Script MT"' }} className="text-2xl font-bold mt-1">
                                <span style={blueTextStyle}>Stron</span>
                                <span style={orangeTextStyle}>g</span>
                                <span style={blueTextStyle}>er To</span>
                                <span style={orangeTextStyle}>g</span>
                                <span style={blueTextStyle}>ether</span>
                            </p>
                         </div>
                    </header>
                    
                    <main 
                        className={`flex-grow w-full flex items-start my-8 overflow-hidden`}
                        style={{ height: containerHeight }}
                    >
                       {trivia ? (
                            <div
                                ref={triviaCardRef}
                                className="w-full"
                                style={{
                                    transform: `scale(${scale})`,
                                    transformOrigin: 'top center',
                                    transition: 'transform 0.3s ease-out',
                                }}>
                                <div 
                                    className={`p-10 rounded-2xl shadow-xl border ${t.border} ${t.cardBg} trivia-card-content`} 
                                    style={{ backdropFilter: 'blur(10px)' }}>
                                    <div className='space-y-8'>
                                        <div>
                                            <p className={`text-2xl font-semibold ${t.accent}`}>TRIVIA QUESTION:</p>
                                            <BoldFormattedText text={trivia.triviaQuestion} className={`text-4xl mt-2 font-bold leading-tight ${t.mainText}`} />
                                        </div>
                                        <div className={`p-6 rounded-lg border-l-8 ${t.answerBorder} ${t.answerBg}`}>
                                            <p className={`text-2xl font-semibold ${t.answerText}`}>ANSWER:</p>
                                            <BoldFormattedText text={trivia.triviaAnswer} className={`text-4xl mt-2 font-bold leading-tight ${t.answerText}`} />
                                        </div>
                                        <div>
                                            <p className={`text-xl font-semibold ${t.secondaryText}`}>What's the difference?</p>
                                            <BoldFormattedText text={trivia.explanation} className={`text-2xl mt-2 leading-normal ${t.secondaryText}`} />
                                        </div>
                                    </div>
                                </div>
                            </div>
                       ) : (
                           <div className={`text-center h-full flex items-center justify-center ${t.secondaryText}`}>
                               <p className="text-2xl">Click "Generate New Trivia" to begin!</p>
                           </div>
                       )}
                    </main>
                    
                    <footer ref={footerRef} className="flex-shrink-0 flex flex-col items-center justify-end text-center mt-auto pt-4 space-y-4">
                        {trivia && (
                            <div className={`w-full p-4 rounded-lg ${t.communiqueBg}`}>
                                <p className={`p-1 rounded-md text-xl font-semibold transition-colors duration-200 ${t.communiqueHashtag}`}>
                                    {trivia.hashtags}
                                </p>
                            </div>
                        )}
                        <div className={`w-full p-6 rounded-xl flex items-center ${theme === 'light' ? 'bg-white' : 'bg-gray-800'} ${t.shadow}`}>
                            <div className="w-2/3 pr-6">
                                <div className="grid grid-cols-3 gap-x-5 text-left">
                                    <div className="flex items-start space-x-3">
                                        <LocationIcon />
                                        <div>
                                            <strong className={`font-semibold block text-sm ${t.mainText}`}>Address</strong>
                                            <p className={`text-xs ${t.footerText}`}>3rd Flr, Masskara Hall, BCGC, Brgy. Villamonte, Bacolod City</p>
                                        </div>
                                    </div>
                                    <div className="flex items-start space-x-3">
                                        <PhoneIcon />
                                        <div>
                                            <strong className={`font-semibold block text-sm ${t.mainText}`}>Mobile No.</strong>
                                            <p className={`text-xs ${t.footerText}`}>09486268509</p>
                                        </div>
                                    </div>
                                    <div className="flex items-start space-x-3">
                                        <EmailIcon />
                                        <div>
                                            <strong className={`font-semibold block text-sm ${t.mainText}`}>E-mail</strong>
                                            <p className={`text-xs ${t.footerText}`}>bac@bacolodcity.gov.ph</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div className={`w-1/3 pl-6 flex items-center space-x-4 border-l ${t.border}`}>
                                <a href={facebookPageUrl} target="_blank" rel="noopener noreferrer">
                                    <img 
                                        src={qrCodeUrl}
                                        alt="Facebook Page QR Code"
                                        className="h-[90px] w-[90px] rounded-md flex-shrink-0"
                                    />
                                </a>
                                <div className="text-left">
                                    <a href={facebookPageUrl} target="_blank" rel="noopener noreferrer">
                                        <p className={`font-black text-xl leading-tight ${t.mainText}`}>BACOLOD CITY</p>
                                        <p className={`font-semibold text-base leading-tight ${t.accent}`}>Bids and Awards Committee</p>
                                        <div className="flex items-center mt-1 space-x-1">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" className={`${theme === 'light' ? 'text-blue-600' : 'text-blue-400'}`}><path fill="currentColor" d="M22 12c0-5.52-4.48-10-10-10S2 6.48 2 12c0 4.84 3.44 8.87 8 9.8V15H8v-3h2V9.5C10 7.57 11.57 6 13.5 6H16v3h-1.5c-1 0-1.5.5-1.5 1.5V12h3l-.5 3h-2.5v6.8A10 10 0 0 0 22 12z"/></svg>
                                            <span className={`text-xs underline ${t.footerText}`}>Follow us on Facebook</span>
                                        </div>
                                    </a>
                                </div>
                            </div>
                        </div>
                    </footer>
                </div>
            </div>
        </div>
    );
};

export default SocialMediaTriviaTab;
